# -*- coding: utf-8 -*-
"""02_pytorch_classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JOmqz20nUT7TLI5afXnm6LcmOoJpDL8c

# 02. Neural Network Classification with PyTorch
Classification is a problem of predicting wheter something is one thing or another (There can be multiple things as the options)

##1. Make classification data and get it ready
"""

import sklearn

##1. Make classifications data and get it ready
from sklearn.datasets import make_circles

# Make 1000 samples
n_samples = 1000

# Create circles
X, y = make_circles(n_samples,
                    noise=0.03,  # making it more random
                    random_state=42) #equivalent of a random seed

len(X)
len(y) # Binary, all values are between 0 and 1

print(f"First 5 samples of X:\n{X[:5]}")
print(f"First 5 samples of y:\n{y[:5]}")

# Make DataFrame of circle data
import pandas as pd
circles = pd.DataFrame({"X1": X[:, 0], "X2": X[:,1], "label":y})
circles.head(10)

# Visualize the data
import matplotlib.pyplot as plt

plt.scatter(x=X[:,0],
            y=X[:,1],
            c=y,
            cmap=plt.cm.RdYlBu)

# Note that the data we're working with is often refered to as a toy dataset,
# Its small enough to expirment but still enough to practice the fundamentals

# 1.1 Check input and output shapes

X.shape, y.shape

# View the first example of features and labels
X_sample = X[0]
y_sample = y[0]

print(f"Values for one sample of X: {X_sample} and the same for y: {y_sample}")
print(f"Shapes for one sample of x{X_sample.shape} and the same for y: {y_sample.shape}")

"""### 1,2 Turn data into tensors and create train and test splits

"""

import torch
torch.__version__

type(X)

v # Turn data into tensors

X = torch.from_numpy(X).type(torch.float)
y = torch.from_numpy(y).type(torch.float)

X[:5], y[:5]